#!/usr/bin/env python3
try:
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    import BaseHTTPServer
    HTTPServer = BaseHTTPServer.HTTPServer
except ImportError:
    # PY3
    from http.server import (SimpleHTTPRequestHandler, BaseHTTPRequestHandler, HTTPServer)
    import http.server as BaseHTTPServer

import os
from io import BytesIO
import logging
from ProteinClassification.proteinPicker import ProteinPicker

# essentially like SimpleHTTPRequestHandler, but sets the allow origin
# header.
class RelaxedRequestHandler(SimpleHTTPRequestHandler):
    folderPath = '/Users/sircrashalot/Documents/school/thesis/proteins/'
    pp = ProteinPicker()

    def send_head(self):
        """
        This is a verbatim copy of the SimpleHTTPRequestHandler.send_head
        method. There are no other ways to inject the  Allow-Origin
        header here...
        """
        path = self.translate_path(self.path)
        f = None
        if os.path.isdir(path):
            if not self.path.endswith('/'):
                # redirect browser - doing basically what apache does
                self.send_response(301)
                self.send_header("Location", self.path + "/")
                self.end_headers()
                return None
            for index in "index.html", "index.htm":
                index = os.path.join(path, index)
                if os.path.exists(index):
                    path = index
                    break
            else:
                return self.list_directory(path)

        if self.path.endswith('nextProtein'):
                self.send_response(200)
                self.end_headers()
                response = BytesIO()
                #get next protien
                
                nextProtein = self.pp.findNextProtein(self.folderPath)
                print('returning the next protein ', nextProtein)
                response.write(nextProtein)

                self.wfile.write(response.getvalue())
                return response
        else:
            ctype = self.guess_type(path)
            try:
                # Always read in binary mode. Opening files in text mode may cause
                # newline translations, making the actual size of the content
                # transmitted *less* than the content-length!
                f = open(path, 'rb')
            except IOError:
                self.send_error(404, "File not found")
                return None
            self.send_response(200)
            self.send_header("Content-type", ctype)
            fs = os.fstat(f.fileno())
            self.send_header("Content-Length", str(fs[6]))
            self.send_header('Access-Control-Allow-Origin', '"*"')
            self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
            self.end_headers()
            return f

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        body = self.rfile.read(content_length)

        proteinName = self.path[self.path.find('=')+1:]
        print('saving protein ', proteinName)
        #save protein to file
        
        self.pp.savePNG(proteinName, self.folderPath, body)

        #construct a response
        self.send_response(200)
        self.end_headers()
        response = BytesIO()
        self.wfile.write(response.getvalue())

BaseHTTPServer.test(RelaxedRequestHandler, HTTPServer)

#Need a class to handle the saving of a png
    #May need to get rid of the gray background,
    #noise in the image
#Need a class to determine the next protein to analyse
    #25PDB lists 1600 proteins,
    #formulate the pdb url for the corrispoinding fasta file
